<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Http_Response" namespace="" name="Zend_Http_Response" abstract="false" final="false" start="34" end="667">
  <file path="/var/www/_modules/social_integration/trunk/docs/en/phpdox/../../../thirdparty/Zend/Http" file="Response.php" realpath="/var/www/_modules/social_integration/trunk/thirdparty/Zend/Http/Response.php" size="18594" time="2015-03-14T10:23:58+13:00" unixtime="1426281838" sha1="f340f84abb07baf34212a1265f5b3d7ab1c20291" relative="thirdparty/Zend/Http/Response.php"/>
  <docblock>
    <description compact="Zend_Http_Response represents an HTTP 1.0 / 1.1 response message. It includes easy access to all the response's different elemts, as well as some convenience methods for parsing and validating HTTP responses."/>
    <package value="Zend_Http"/>
    <subpackage value="Response"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <member name="messages" type="array" visibility="protected" line="42">
    <docblock>
      <description compact="List of all known HTTP response codes - used by responseCodeAsText() to translate numeric codes to messages."/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="version" type="{unknown}" visibility="protected" line="101">
    <docblock>
      <description compact="The HTTP version (1.0, 1.1)"/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="code" type="{unknown}" visibility="protected" line="108">
    <docblock>
      <description compact="The HTTP response code"/>
      <var type="int"/>
    </docblock>
  </member>
  <member name="message" type="{unknown}" visibility="protected" line="116">
    <docblock>
      <description compact="The HTTP response code as string (e.g. 'Not Found' for 404 or 'Internal Server Error' for 500)"/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="headers" type="array" visibility="protected" line="123">
    <docblock>
      <description compact="The HTTP response headers array"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="body" type="{unknown}" visibility="protected" line="130">
    <docblock>
      <description compact="The HTTP response body"/>
      <var type="string"/>
    </docblock>
  </member>
  <constructor name="__construct" start="151" end="194" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="HTTP response constructor">In most cases, you would use Zend_Http_Response::fromString to parse an HTTP
response string and create a new Zend_Http_Response object.

NOTE: The constructor no longer accepts nulls or empty values for the code and
headers and will throw an exception if the passed values do not form a valid HTTP
responses.

If no message is passed, the message will be guessed according to the response code.</description>
      <param description="Response code (200, 404, ...)" type="int" variable="$code"/>
      <param description="Headers array" type="array" variable="$headers"/>
      <param description="Response body" type="string" variable="$body"/>
      <param description="HTTP version" type="string" variable="$version"/>
      <param description="Response code as text" type="string" variable="$message"/>
      <throws type="object">
        <type full="Zend_Http_Exception" namespace="" name="Zend_Http_Exception"/>
      </throws>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
    <parameter name="headers" byreference="false" type="array"/>
    <parameter name="body" byreference="false" type="{unknown}" default="null"/>
    <parameter name="version" byreference="false" type="string" default="'1.1'"/>
    <parameter name="message" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="Make sure the response code is valid and set it" line="153"/>
      <comment value="Set the body" line="176"/>
      <comment value="Set the HTTP version" line="179"/>
      <comment value="If we got the response message, set it. Else, set it according to" line="187"/>
      <comment value="the response code" line="188"/>
    </inline>
  </constructor>
  <method name="isError" start="201" end="209" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check whether the response is an error"/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="isSuccessful" start="216" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check whether the response in successful"/>
      <return type="boolean"/>
    </docblock>
    <inline>
      <comment value="Shouldn't 3xx count as success as well ???" line="219"/>
    </inline>
  </method>
  <method name="isRedirect" start="231" end="239" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check whether the response is a redirection"/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="getBody" start="253" end="290" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the response body as string">This method returns the body of the HTTP response (the content), as it
should be in it's readable version - that is, after decoding it (if it
was decoded), deflating it (if it was gzip compressed), etc.

If you want to get the raw body (as transfered on wire) use
$this-&gt;getRawBody() instead.</description>
      <return type="string"/>
    </docblock>
    <inline>
      <comment value="Decode the body if it was transfer-encoded" line="257"/>
      <comment value="Decode any content-encoding (gzip or deflate) if needed" line="272"/>
    </inline>
  </method>
  <method name="getRawBody" start="300" end="303" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the raw response body (as transfered &quot;on wire&quot;) as string">If the body is encoded (with Transfer-Encoding, not content-encoding -
IE "chunked" body), gzip compressed, etc. it will not be decoded.</description>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getVersion" start="310" end="313" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the HTTP version of the response"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getStatus" start="320" end="323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the HTTP response status code"/>
      <return type="int"/>
    </docblock>
  </method>
  <method name="getMessage" start="331" end="334" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return a message describing the HTTP response code (Eg. &quot;OK&quot;, &quot;Not Found&quot;, &quot;Moved Permanently&quot;)"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getHeaders" start="341" end="344" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the response headers"/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="getHeader" start="352" end="358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get a specific header as string, or null if it is not set"/>
      <param type="object">
        <type full="string$header" namespace="" name="string$header"/>
      </param>
      <return type="object">
        <type full="string|array|null" namespace="" name="string|array|null"/>
      </return>
    </docblock>
    <parameter name="header" byreference="false" type="{unknown}"/>
  </method>
  <method name="getHeadersAsString" start="367" end="389" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all headers as string"/>
      <param description="Whether to return the first status line (IE &quot;HTTP 200 OK&quot;)" type="boolean" variable="$status_line"/>
      <param description="Line breaks (eg. &quot;\n&quot;, &quot;\r\n&quot;, &quot;&lt;br /&gt;&quot;)" type="string" variable="$br"/>
      <return type="string"/>
    </docblock>
    <parameter name="status_line" byreference="false" type="{unknown}" default="true"/>
    <parameter name="br" byreference="false" type="string" default="&quot;\n&quot;"/>
    <inline>
      <comment value="Iterate over the headers and stringify them" line="375"/>
    </inline>
  </method>
  <method name="asString" start="397" end="400" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get the entire response as string"/>
      <param description="Line breaks (eg. &quot;\n&quot;, &quot;\r\n&quot;, &quot;&lt;br /&gt;&quot;)" type="string" variable="$br"/>
      <return type="string"/>
    </docblock>
    <parameter name="br" byreference="false" type="string" default="&quot;\n&quot;"/>
  </method>
  <method name="__toString" start="407" end="410" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Implements magic __toString()"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="responseCodeAsText" start="424" end="436" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="A convenience function that returns a text representation of HTTP response codes. Returns 'Unknown' for unknown codes.">Returns array of all codes, if $code is not specified.

Conforms to HTTP/1.1 as defined in RFC 2616 (except for 'Unknown')
See http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10 for reference</description>
      <param description="HTTP response code" type="int" variable="$code"/>
      <param description="Use HTTP version 1.1" type="boolean" variable="$http11"/>
      <return type="string"/>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}" default="null"/>
    <parameter name="http11" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="extractCode" start="444" end="453" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract the response code from a response string"/>
      <param type="string" variable="$response_str"/>
      <return type="int"/>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
  </method>
  <method name="extractMessage" start="461" end="470" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract the HTTP message from a response"/>
      <param type="string" variable="$response_str"/>
      <return type="string"/>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
  </method>
  <method name="extractVersion" start="478" end="487" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract the HTTP version from a response"/>
      <param type="string" variable="$response_str"/>
      <return type="string"/>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
  </method>
  <method name="extractHeaders" start="495" end="540" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract the headers from a response string"/>
      <param type="string" variable="$response_str"/>
      <return type="array"/>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="First, split body and headers" line="499"/>
      <comment value="Split headers part to lines" line="503"/>
      <comment value="Locate headers like 'Location: ...' and 'Location:...' (note the missing space)" line="512"/>
    </inline>
  </method>
  <method name="extractBody" start="548" end="555" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Extract the body from a response string"/>
      <param type="string" variable="$response_str"/>
      <return type="string"/>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
  </method>
  <method name="decodeChunkedBody" start="563" end="593" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Decode a &quot;chunked&quot; transfer-encoded body and return the decoded text"/>
      <param type="string" variable="$body"/>
      <return type="string"/>
    </docblock>
    <parameter name="body" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="If mbstring overloads substr and strlen functions, we have to" line="567"/>
      <comment value="override it's internal encoding" line="568"/>
    </inline>
  </method>
  <method name="decodeGzip" start="603" end="613" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Decode a gzip encoded message (when Content-encoding = gzip)">Currently requires PHP with zlib support</description>
      <param type="string" variable="$body"/>
      <return type="string"/>
    </docblock>
    <parameter name="body" byreference="false" type="{unknown}"/>
  </method>
  <method name="decodeDeflate" start="623" end="649" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Decode a zlib deflated message (when Content-encoding = deflate)">Currently requires PHP with zlib support</description>
      <param type="string" variable="$body"/>
      <return type="string"/>
    </docblock>
    <parameter name="body" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Some servers (IIS ?) send a broken deflate response, without the" line="632"/>
      <comment xmlns="http://xml.phpdox.net/src" value="RFC-required zlib header." line="633"/>
      <comment xmlns="http://xml.phpdox.net/src" value="We try to detect the zlib header, and if it does not exsit we" line="634"/>
      <comment xmlns="http://xml.phpdox.net/src" value="teat the body is plain DEFLATE content." line="635"/>
      <comment xmlns="http://xml.phpdox.net/src" value="This method was adapted from PEAR HTTP_Request2 by (c) Alexey Borzov" line="636"/>
      <comment xmlns="http://xml.phpdox.net/src" value="@link http://framework.zend.com/issues/browse/ZF-6040" line="637"/>
    </inline>
  </method>
  <method name="fromString" start="657" end="666" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create a new Zend_Http_Response object from a string"/>
      <param type="string" variable="$response_str"/>
      <return type="object">
        <type full="Zend_Http_Response" namespace="" name="Zend_Http_Response"/>
      </return>
    </docblock>
    <parameter name="response_str" byreference="false" type="{unknown}"/>
  </method>
  <extender full="Zend_Http_Response_Stream" namespace="" name="Zend_Http_Response_Stream"/>
</class>
