<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Oauth_Client" namespace="" name="Zend_Oauth_Client" abstract="false" final="false" start="40" end="340">
  <file path="/var/www/_modules/social_integration/trunk/docs/en/phpdox/../../../thirdparty/Zend/Oauth" file="Client.php" realpath="/var/www/_modules/social_integration/trunk/thirdparty/Zend/Oauth/Client.php" size="11218" time="2015-03-14T10:23:59+13:00" unixtime="1426281839" sha1="9f16bc141fe57be49b921b2108e23a77327ff38c" relative="thirdparty/Zend/Oauth/Client.php"/>
  <docblock>
    <description/>
    <category value="Zend"/>
    <package value="Zend_Oauth"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <extends full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
  <member name="supportsRevisionA" type="{unknown}" default="false" visibility="public" line="46">
    <docblock>
      <description compact="Flag to indicate that the client has detected the server as supporting OAuth 1.0a"/>
    </docblock>
  </member>
  <member name="_config" type="{unknown}" default="null" visibility="protected" line="56">
    <docblock>
      <description compact="Holds the current OAuth Configuration set encapsulated in an instance of Zend_Oauth_Config; it's not a Zend_Config instance since that level of abstraction is unnecessary and doesn't let me escape the accessors and mutators anyway!"/>
      <var type="object">
        <type full="Zend_Oauth_Config" namespace="" name="Zend_Oauth_Config"/>
      </var>
    </docblock>
  </member>
  <member name="_streamingRequest" type="{unknown}" default="null" visibility="protected" line="64">
    <docblock>
      <description compact="True if this request is being made with data supplied by a stream object instead of a raw encoded string."/>
      <var type="object">
        <type full="bool" namespace="" name="bool"/>
      </var>
    </docblock>
  </member>
  <constructor name="__construct" start="77" end="90" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor; creates a new HTTP Client instance which itself is just a typical Zend_Http_Client subclass with some OAuth icing to assist in automating OAuth parameter generation, addition and cryptographioc signing of requests."/>
      <param type="array" variable="$oauthOptions"/>
      <param type="string" variable="$uri"/>
      <param type="object" variable="$config">
        <type full="array|Zend_Config" namespace="" name="array|Zend_Config"/>
      </param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="oauthOptions" byreference="false" type="{unknown}"/>
    <parameter name="uri" byreference="false" type="{unknown}" default="null"/>
    <parameter name="config" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="getAdapter" start="97" end="100" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the current connection adapter"/>
      <return description="$adapter" type="object">
        <type full="Zend_Http_Client_Adapter_Interface|string" namespace="" name="Zend_Http_Client_Adapter_Interface|string"/>
      </return>
    </docblock>
  </method>
  <method name="setAdapter" start="108" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Load the connection adapter"/>
      <param type="object" variable="$adapter">
        <type full="Zend_Http_Client_Adapter_Interface" namespace="" name="Zend_Http_Client_Adapter_Interface"/>
      </param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="adapter" byreference="false" type="{unknown}"/>
  </method>
  <method name="setStreamingRequest" start="124" end="127" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the streamingRequest variable which controls whether we are sending the raw (already encoded) POST data from a stream source."/>
      <param description="The value to set." type="boolean" variable="$value"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="getStreamingRequest" start="134" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check whether the client is set to perform streaming requests."/>
      <return description="True if yes, false otherwise." type="boolean"/>
    </docblock>
  </method>
  <method name="_prepareBody" start="149" end="159" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Prepare the request body (for POST and PUT requests)"/>
      <return type="string"/>
      <throws type="object">
        <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="resetParameters" start="166" end="170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Clear all custom parameters we set."/>
      <return type="object">
        <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
      </return>
    </docblock>
    <parameter name="clearAll" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="setRawDataStream" start="183" end="187" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the raw (already encoded) POST data from a stream source.">This is used to support POSTing from open file handles without
caching the entire body into memory. It is a wrapper around
Zend_Http_Client::setRawData().</description>
      <param description="The request data" type="string" variable="$data"/>
      <param description="The encoding type" type="string" variable="$enctype"/>
      <return type="object">
        <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
      </return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="enctype" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="setMethod" start="197" end="211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Same as Zend_Http_Client::setMethod() except it also creates an Oauth specific reference to the method type.">Might be defunct and removed in a later iteration.</description>
      <param type="string" variable="$method"/>
      <return type="object">
        <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}" default="self::GET"/>
  </method>
  <method name="request" start="221" end="228" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Same as Zend_Http_Client::request() except just before the request is executed, we automatically append any necessary OAuth parameters and sign the request using the relevant signature method."/>
      <param type="string" variable="$method"/>
      <return type="object">
        <type full="Zend_Http_Response" namespace="" name="Zend_Http_Response"/>
      </return>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="prepareOauth" start="240" end="295" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Performs OAuth preparation on the request before sending.">This primarily means taking a request, correctly encoding and signing
all parameters, and applying the correct OAuth scheme to the method
being used.</description>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <throws description="If POSTBODY scheme requested, but GET request method used; or if invalid request scheme provided" type="object">
        <type full="Zend_Oauth_Exception" namespace="" name="Zend_Oauth_Exception"/>
      </throws>
    </docblock>
  </method>
  <method name="_getSignableParametersAsQueryString" start="304" end="320" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Collect all signable parameters into a single array across query string and POST body. These are returned as a properly formatted single query string."/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="__call" start="332" end="339" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Simple Proxy to the current Zend_Oauth_Config method. It's that instance which holds all configuration methods and values this object also presents as it's API."/>
      <param type="string" variable="$method"/>
      <param type="array" variable="$args"/>
      <return type="mixed"/>
      <throws description="if method does not exist in config object" type="object">
        <type full="Zend_Oauth_Exception" namespace="" name="Zend_Oauth_Exception"/>
      </throws>
    </docblock>
    <parameter name="method" byreference="false" type="{unknown}"/>
    <parameter name="args" byreference="false" type="array"/>
  </method>
  <parent full="Zend_Http_Client" namespace="" name="Zend_Http_Client">
    <constant name="GET" value="'GET'">
      <docblock>
        <description compact="HTTP request methods"/>
      </docblock>
    </constant>
    <constant name="POST" value="'POST'"/>
    <constant name="PUT" value="'PUT'"/>
    <constant name="HEAD" value="'HEAD'"/>
    <constant name="DELETE" value="'DELETE'"/>
    <constant name="TRACE" value="'TRACE'"/>
    <constant name="OPTIONS" value="'OPTIONS'"/>
    <constant name="CONNECT" value="'CONNECT'"/>
    <constant name="MERGE" value="'MERGE'"/>
    <constant name="AUTH_BASIC" value="'basic'">
      <docblock>
        <description compact="Supported HTTP Authentication methods"/>
      </docblock>
    </constant>
    <constant name="HTTP_1" value="'1.1'">
      <docblock>
        <description compact="HTTP protocol versions"/>
      </docblock>
    </constant>
    <constant name="HTTP_0" value="'1.0'"/>
    <constant name="CONTENT_TYPE" value="'Content-Type'">
      <docblock>
        <description compact="Content attributes"/>
      </docblock>
    </constant>
    <constant name="CONTENT_LENGTH" value="'Content-Length'"/>
    <constant name="ENC_URLENCODED" value="'application/x-www-form-urlencoded'">
      <docblock>
        <description compact="POST data encoding methods"/>
      </docblock>
    </constant>
    <constant name="ENC_FORMDATA" value="'multipart/form-data'"/>
    <member name="config" type="array" visibility="protected" line="110">
      <docblock>
        <description compact="Configuration array, set using the constructor or using ::setConfig()"/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="adapter" type="{unknown}" default="null" visibility="protected" line="130">
      <docblock>
        <description compact="The adapter used to perform the actual connection to the server"/>
        <var type="object">
          <type full="Zend_Http_Client_Adapter_Interface" namespace="" name="Zend_Http_Client_Adapter_Interface"/>
        </var>
      </docblock>
    </member>
    <member name="uri" type="{unknown}" default="null" visibility="protected" line="137">
      <docblock>
        <description compact="Request URI"/>
        <var type="object">
          <type full="Zend_Uri_Http" namespace="" name="Zend_Uri_Http"/>
        </var>
      </docblock>
    </member>
    <member name="headers" type="array" visibility="protected" line="144">
      <docblock>
        <description compact="Associative array of request headers"/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="method" type="{unknown}" default="self::GET" visibility="protected" line="151">
      <docblock>
        <description compact="HTTP request method"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="paramsGet" type="array" visibility="protected" line="158">
      <docblock>
        <description compact="Associative array of GET parameters"/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="paramsPost" type="array" visibility="protected" line="165">
      <docblock>
        <description compact="Associative array of POST parameters"/>
        <var type="array"/>
      </docblock>
    </member>
    <member name="enctype" type="{unknown}" default="null" visibility="protected" line="172">
      <docblock>
        <description compact="Request body content type (for POST requests)"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="raw_post_data" type="{unknown}" default="null" visibility="protected" line="179">
      <docblock>
        <description compact="The raw post data to send. Could be set by setRawData($data, $enctype)."/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="auth" type="{unknown}" visibility="protected" line="193">
      <docblock>
        <description compact="HTTP Authentication settings">Expected to be an associative array with this structure:
$this-&gt;auth = array('user' =&gt; 'username', 'password' =&gt; 'password', 'type' =&gt; 'basic')
Where 'type' should be one of the supported authentication types (see the AUTH_*
constants), for example 'basic' or 'digest'.

If null, no authentication will be used.</description>
        <var type="object">
          <type full="array|null" namespace="" name="array|null"/>
        </var>
      </docblock>
    </member>
    <member name="files" type="array" visibility="protected" line="203">
      <docblock>
        <description compact="File upload arrays (used in POST requests)">An associative array, where each element is of the format:
  'name' =&gt; array('filename.txt', 'text/plain', 'This is the actual file contents')</description>
        <var type="array"/>
      </docblock>
    </member>
    <member name="cookiejar" type="{unknown}" default="null" visibility="protected" line="210">
      <docblock>
        <description compact="The client's cookie jar"/>
        <var type="object">
          <type full="Zend_Http_CookieJar" namespace="" name="Zend_Http_CookieJar"/>
        </var>
      </docblock>
    </member>
    <member name="last_request" type="{unknown}" default="null" visibility="protected" line="217">
      <docblock>
        <description compact="The last HTTP request sent by the client, as string"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="last_response" type="{unknown}" default="null" visibility="protected" line="224">
      <docblock>
        <description compact="The last HTTP response received by the client"/>
        <var type="object">
          <type full="Zend_Http_Response" namespace="" name="Zend_Http_Response"/>
        </var>
      </docblock>
    </member>
    <member name="redirectCounter" type="integer" default="0" visibility="protected" line="231">
      <docblock>
        <description compact="Redirection counter"/>
        <var type="int"/>
      </docblock>
    </member>
    <member name="_fileInfoDb" type="{unknown}" default="null" visibility="protected" line="241">
      <docblock>
        <description compact="Fileinfo magic database resource">This variable is populated the first time _detectFileMimeType is called
and is then reused on every call to this method</description>
        <var type="resource"/>
      </docblock>
    </member>
    <constructor name="__construct" start="250" end="258" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor method. Will create a new HTTP client. Accepts the target URL and optionally configuration array."/>
        <param type="object" variable="$uri">
          <type full="Zend_Uri_Http|string" namespace="" name="Zend_Uri_Http|string"/>
        </param>
        <param description="Configuration key-value pairs." type="array" variable="$config"/>
      </docblock>
      <parameter name="uri" byreference="false" type="{unknown}" default="null"/>
      <parameter name="config" byreference="false" type="{unknown}" default="null"/>
    </constructor>
    <method name="setUri" start="267" end="292" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the URI for the next request"/>
        <param type="object" variable="$uri">
          <type full="Zend_Uri_Http|string" namespace="" name="Zend_Uri_Http|string"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="uri" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="@see Zend_Http_Client_Exception" line="274"/>
        <comment value="Set auth if username and password has been specified in the uri" line="279"/>
        <comment value="We have no ports, set the defaults" line="284"/>
      </inline>
    </method>
    <method name="getUri" start="300" end="307" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the URI for the next request"/>
        <param description="If true, will return the URI as a string" type="boolean" variable="$as_string"/>
        <return type="object">
          <type full="Zend_Uri_Http|string" namespace="" name="Zend_Uri_Http|string"/>
        </return>
      </docblock>
      <parameter name="as_string" byreference="false" type="{unknown}" default="false"/>
    </method>
    <method name="setConfig" start="316" end="337" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set configuration parameters for this HTTP client"/>
        <param description="| array $config" type="object">
          <type full="Zend_Config" namespace="" name="Zend_Config"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="config" byreference="false" type="array"/>
      <inline>
        <comment value="Pass configuration options to the adapter if it exists" line="331"/>
      </inline>
    </method>
    <method name="setMethod" start="350" end="365" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the next request's method">Validated the passed method and sets it. If we have files set for
POST requests, and the new method is not POST, the files are silently
dropped.</description>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}" default="self::GET"/>
      <inline>
        <comment value="@see Zend_Http_Client_Exception" line="353"/>
      </inline>
    </method>
    <method name="setHeaders" start="386" end="427" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set one or more request headers">This function can be used in several ways to set the client's request
headers:
1. By providing two parameters: $name as the header to set (e.g. 'Host')
   and $value as it's value (e.g. 'www.example.com').
2. By providing a single header string as the only parameter
   e.g. 'Host: www.example.com'
3. By providing an array of headers as the first parameter
   e.g. array('host' =&gt; 'www.example.com', 'x-foo: bar'). In This case
   the function will call itself recursively for each array item.</description>
        <param description="Header name, full header string ('Header: value')" type="object" variable="$name">or an array of headers<type full="string|array" namespace="" name="string|array"/></param>
        <param description="Header value or null" type="mixed" variable="$value"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="If we got an array, go recursive!" line="388"/>
      </inline>
    </method>
    <method name="getHeader" start="438" end="446" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the value of a specific header">Note that if the header has more than one value, an array
will be returned.</description>
        <param type="string" variable="$key"/>
        <return description="The header value or null if it is not set" type="object">
          <type full="string|array|null" namespace="" name="string|array|null"/>
        </return>
      </docblock>
      <parameter name="key" byreference="false" type="{unknown}"/>
    </method>
    <method name="setParameterGet" start="455" end="465" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a GET parameter for the request. Wrapper around _setParameter"/>
        <param type="object" variable="$name">
          <type full="string|array" namespace="" name="string|array"/>
        </param>
        <param type="string" variable="$value"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setParameterPost" start="474" end="484" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a POST parameter for the request. Wrapper around _setParameter"/>
        <param type="object" variable="$name">
          <type full="string|array" namespace="" name="string|array"/>
        </param>
        <param type="string" variable="$value"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="_setParameter" start="494" end="512" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Set a GET or POST parameter - used by SetParameterGet and SetParameterPost"/>
        <param description="GET or POST" type="string" variable="$type"/>
        <param type="string" variable="$name"/>
        <param type="string" variable="$value"/>
        <return type="object">
          <type full="null" namespace="" name="null"/>
        </return>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
    </method>
    <method name="getRedirectionsCount" start="519" end="522" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the number of redirections done on the last request"/>
        <return type="int"/>
      </docblock>
    </method>
    <method name="setAuth" start="547" end="575" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set HTTP authentication parameters">$type should be one of the supported types - see the self::AUTH_*
constants.

To enable authentication:
&lt;code&gt;
$this-&gt;setAuth('shahar', 'secret', Zend_Http_Client::AUTH_BASIC);
&lt;/code&gt;

To disable authentication:
&lt;code&gt;
$this-&gt;setAuth(false);
&lt;/code&gt;</description>
        <see value="http://www.faqs.org/rfcs/rfc2617.html"/>
        <param description="User name or false disable authentication" type="object" variable="$user">
          <type full="string|false" namespace="" name="string|false"/>
        </param>
        <param description="Password" type="string" variable="$password"/>
        <param description="Authentication type" type="string" variable="$type"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="user" byreference="false" type="{unknown}"/>
      <parameter name="password" byreference="false" type="string" default="''"/>
      <parameter name="type" byreference="false" type="{unknown}" default="self::AUTH_BASIC"/>
      <inline>
        <comment value="If we got false or null, disable authentication" line="549"/>
        <comment value="Clear the auth information in the uri instance as well" line="553"/>
      </inline>
    </method>
    <method name="setCookieJar" start="587" end="604" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the HTTP client's cookie jar.">A cookie jar is an object that holds and maintains cookies across HTTP requests
and responses.</description>
        <param description="Existing cookiejar object, true to create a new one, false to disable" type="object" variable="$cookiejar">
          <type full="Zend_Http_CookieJar|boolean" namespace="" name="Zend_Http_CookieJar|boolean"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="cookiejar" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getCookieJar" start="611" end="614" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Return the current cookie jar or null if none."/>
        <return type="object">
          <type full="Zend_Http_CookieJar|null" namespace="" name="Zend_Http_CookieJar|null"/>
        </return>
      </docblock>
    </method>
    <method name="setCookie" start="625" end="676" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Add a cookie to the request. If the client has no Cookie Jar, the cookies will be added directly to the headers array as &quot;Cookie&quot; headers."/>
        <param type="object" variable="$cookie">
          <type full="Zend_Http_Cookie|string" namespace="" name="Zend_Http_Cookie|string"/>
        </param>
        <param description="If &quot;cookie&quot; is a string, this is the cookie value." type="object" variable="$value">
          <type full="string|null" namespace="" name="string|null"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="cookie" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}" default="null"/>
    </method>
    <method name="setFileUpload" start="698" end="723" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set a file to upload (using a POST request)">Can be used in two ways:

1. $data is null (default): $filename is treated as the name if a local file which
   will be read and sent. Will try to guess the content type using mime_content_type().
2. $data is set - $filename is sent as the file name, but $data is sent as the file
   contents and no file is read from the file system. In this case, you need to
   manually set the Content-Type ($ctype) or it will default to
   application/octet-stream.</description>
        <param description="Name of file to upload, or name to save as" type="string" variable="$filename"/>
        <param description="Name of form element to send as" type="string" variable="$formname"/>
        <param description="Data to send (if null, $filename is read and sent)" type="string" variable="$data"/>
        <param description="Content type to use (if $data is set and $ctype is" type="string" variable="$ctype">null, will be application/octet-stream)</param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="filename" byreference="false" type="{unknown}"/>
      <parameter name="formname" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="{unknown}" default="null"/>
      <parameter name="ctype" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="@see Zend_Http_Client_Exception" line="702"/>
        <comment value="Force enctype to multipart/form-data" line="712"/>
      </inline>
    </method>
    <method name="setEncType" start="731" end="736" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the encoding type for POST data"/>
        <param type="string" variable="$enctype"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="enctype" byreference="false" type="{unknown}" default="self::ENC_URLENCODED"/>
    </method>
    <method name="setRawData" start="752" end="764" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set the raw (already encoded) POST data.">This function is here for two reasons:
1. For advanced user who would like to set their own data, already encoded
2. For backwards compatibilty: If someone uses the old post($data) method.
   this method will be used to set the encoded data.

$data can also be stream (such as file) from which the data will be read.</description>
        <param type="object" variable="$data">
          <type full="string|resource" namespace="" name="string|resource"/>
        </param>
        <param type="string" variable="$enctype"/>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="data" byreference="false" type="{unknown}"/>
      <parameter name="enctype" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="We've got stream data" line="757"/>
      </inline>
    </method>
    <method name="resetParameters" start="778" end="802" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Clear all GET and POST parameters">Should be used to reset the request parameters if the client is
used for several concurrent requests.

clearAll parameter controls if we clean just parameters or also
headers and last_*</description>
        <param description="Should all data be cleared?" type="object" variable="$clearAll">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="clearAll" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="Reset parameter data" line="780"/>
      </inline>
    </method>
    <method name="getLastRequest" start="809" end="812" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the last HTTP request as string"/>
        <return type="string"/>
      </docblock>
    </method>
    <method name="getLastResponse" start="822" end="825" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the last HTTP response received by this client">If $config['storeresponse'] is set to false, or no response was
stored yet, will return null</description>
        <return description="or null if none" type="object">
          <type full="Zend_Http_Response" namespace="" name="Zend_Http_Response"/>
        </return>
      </docblock>
    </method>
    <method name="setAdapter" start="837" end="861" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Load the connection adapter">While this method is not called more than one for a client, it is
seperated from -&gt;request() to preserve logic and readability</description>
        <param type="object" variable="$adapter">
          <type full="Zend_Http_Client_Adapter_Interface|string" namespace="" name="Zend_Http_Client_Adapter_Interface|string"/>
        </param>
        <return type="object">
          <type full="null" namespace="" name="null"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="adapter" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="@see Zend_Http_Client_Exception" line="852"/>
      </inline>
    </method>
    <method name="getAdapter" start="868" end="871" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Load the connection adapter"/>
        <return description="$adapter" type="object">
          <type full="Zend_Http_Client_Adapter_Interface" namespace="" name="Zend_Http_Client_Adapter_Interface"/>
        </return>
      </docblock>
    </method>
    <method name="setStream" start="879" end="883" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set streaming for received data"/>
        <param description="Stream file, true for temp file, false/null for no streaming" type="object" variable="$streamfile">
          <type full="string|boolean" namespace="" name="string|boolean"/>
        </param>
        <return type="object">
          <type full="Zend_Http_Client" namespace="" name="Zend_Http_Client"/>
        </return>
      </docblock>
      <parameter name="streamfile" byreference="false" type="{unknown}" default="true"/>
    </method>
    <method name="getStream" start="889" end="892" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get status of streaming for received data"/>
        <return type="object">
          <type full="boolean|string" namespace="" name="boolean|string"/>
        </return>
      </docblock>
    </method>
    <method name="_openTempStream" start="899" end="917" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Create temporary stream"/>
        <return type="resource"/>
      </docblock>
      <inline>
        <comment value="If name is not given, create temp name" line="903"/>
      </inline>
    </method>
    <method name="request" start="926" end="1074" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Send the HTTP request and return an HTTP response object"/>
        <param type="string" variable="$method"/>
        <return type="object">
          <type full="Zend_Http_Response" namespace="" name="Zend_Http_Response"/>
        </return>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="method" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="@see Zend_Http_Client_Exception" line="929"/>
        <comment value="Make sure the adapter is loaded" line="940"/>
        <comment value="Send the first request. If redirected, continue." line="945"/>
        <comment value="Clone the URI and add the additional GET parameters to it" line="947"/>
        <comment value="check that adapter supports streaming before using it" line="965"/>
        <comment value="@see Zend_Http_Client_Exception" line="967"/>
        <comment value="Open the connection, send the request and read the response" line="972"/>
        <comment value="@see Zend_Http_Client_Exception" line="992"/>
        <comment value="cleanup the adapter" line="999"/>
        <comment value="we used temp name, will need to clean up" line="1004"/>
        <comment value="Load cookies into cookie jar" line="1015"/>
        <comment value="If we got redirected, look for the Location header" line="1020"/>
        <comment value="Avoid problems with buggy servers that add whitespace at the" line="1023"/>
        <comment value="end of some headers (See ZF-11283)" line="1024"/>
        <comment value="Check whether we send the exact same request again, or drop the parameters" line="1027"/>
        <comment value="and send a GET request" line="1028"/>
        <comment value="If we got a well formed absolute URI" line="1037"/>
      </inline>
    </method>
    <method name="_prepareHeaders" start="1081" end="1154" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Prepare the request headers"/>
        <return type="array"/>
      </docblock>
      <inline>
        <comment value="Set the host header" line="1085"/>
        <comment value="If the port is not default, add it" line="1089"/>
        <comment value="Set the connection header" line="1098"/>
        <comment value="Set the Accept-encoding header if not set - depending on whether" line="1105"/>
        <comment value="zlib is available or not." line="1106"/>
        <comment value="Set the Content-Type header" line="1115"/>
        <comment value="Set the user agent header" line="1122"/>
        <comment value="Set HTTP authentication if needed" line="1127"/>
        <comment value="Load cookies from cookie jar" line="1133"/>
        <comment value="Add all other user defined headers" line="1143"/>
      </inline>
    </method>
    <method name="_prepareBody" start="1162" end="1250" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Prepare the request body (for POST and PUT requests)"/>
        <return type="string"/>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <inline>
        <comment value="According to RFC2616, a TRACE request should not have a body." line="1164"/>
        <comment value="If mbstring overloads substr and strlen functions, we have to" line="1172"/>
        <comment value="override it's internal encoding" line="1173"/>
        <comment value="If we have raw_post_data set, just use it as the body." line="1181"/>
        <comment value="If we have files to upload, force enctype to multipart/form-data" line="1193"/>
        <comment value="If we have POST parameters or files, encode and add them to the body" line="1198"/>
        <comment value="Set the Content-Length if we have a body or if request is POST/PUT" line="1240"/>
      </inline>
    </method>
    <method name="_getParametersRecursive" start="1269" end="1303" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Helper method that gets a possibly multi-level parameters array (get or post) and flattens it.">The method returns an array of (key, value) pairs (because keys are not
necessarily unique. If one of the parameters in as array, it will also
add a [] suffix to the key.

This method is deprecated since Zend Framework 1.9 in favour of
self::_flattenParametersArray() and will be dropped in 2.0</description>
        <deprecated value="since 1.9"/>
        <param description="The parameters array" type="array" variable="$parray"/>
        <param description="Whether to urlencode the name and value" type="object" variable="$urlencode">
          <type full="bool" namespace="" name="bool"/>
        </param>
        <return type="array"/>
      </docblock>
      <parameter name="parray" byreference="false" type="{unknown}"/>
      <parameter name="urlencode" byreference="false" type="{unknown}" default="false"/>
      <inline>
        <comment value="Issue a deprecated notice" line="1271"/>
        <comment value="If $value is an array, iterate over it" line="1285"/>
      </inline>
    </method>
    <method name="_detectFileMimeType" start="1319" end="1343" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Attempt to detect the MIME type of a file using available extensions">This method will try to detect the MIME type of a file. If the fileinfo
extension is available, it will be used. If not, the mime_magic
extension which is deprected but is still available in many PHP setups
will be tried.

If neither extension is available, the default application/octet-stream
MIME type will be returned</description>
        <param description="File path" type="string" variable="$file"/>
        <return description="MIME type" type="string"/>
      </docblock>
      <parameter name="file" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="First try with fileinfo functions" line="1323"/>
        <comment value="Fallback to the default application/octet-stream" line="1337"/>
      </inline>
    </method>
    <method name="encodeFormData" start="1355" end="1372" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Encode data to a multipart/form-data part suitable for a POST request."/>
        <param type="string" variable="$boundary"/>
        <param type="string" variable="$name"/>
        <param type="mixed" variable="$value"/>
        <param type="string" variable="$filename"/>
        <param description="Associative array of optional headers @example (&quot;Content-Transfer-Encoding&quot; =&gt; &quot;binary&quot;)" type="array" variable="$headers"/>
        <return type="string"/>
      </docblock>
      <parameter name="boundary" byreference="false" type="{unknown}"/>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="value" byreference="false" type="{unknown}"/>
      <parameter name="filename" byreference="false" type="{unknown}" default="null"/>
      <parameter name="headers" byreference="false" type="array"/>
    </method>
    <method name="encodeAuthHeader" start="1385" end="1414" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact="Create a HTTP authentication &quot;Authorization:&quot; header according to the specified user, password and authentication method."/>
        <see value="http://www.faqs.org/rfcs/rfc2617.html"/>
        <param type="string" variable="$user"/>
        <param type="string" variable="$password"/>
        <param type="string" variable="$type"/>
        <return type="string"/>
        <throws type="object">
          <type full="Zend_Http_Client_Exception" namespace="" name="Zend_Http_Client_Exception"/>
        </throws>
      </docblock>
      <parameter name="user" byreference="false" type="{unknown}"/>
      <parameter name="password" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}" default="self::AUTH_BASIC"/>
    </method>
    <method name="_flattenParametersArray" start="1430" end="1460" abstract="false" final="false" static="true" visibility="protected">
      <docblock>
        <description compact="Convert an array of parameters into a flat array of (key, value) pairs">Will flatten a potentially multi-dimentional array of parameters (such
as POST parameters) into a flat array of (key, value) paris. In case
of multi-dimentional arrays, square brackets ([]) will be added to the
key to indicate an array.</description>
        <since value="1.9"/>
        <param type="array" variable="$parray"/>
        <param type="string" variable="$prefix"/>
        <return type="array"/>
      </docblock>
      <parameter name="parray" byreference="false" type="{unknown}"/>
      <parameter name="prefix" byreference="false" type="{unknown}" default="null"/>
      <inline>
        <comment value="Calculate array key" line="1440"/>
      </inline>
    </method>
  </parent>
</class>
