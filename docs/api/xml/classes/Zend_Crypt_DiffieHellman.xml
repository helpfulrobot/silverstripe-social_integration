<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman" abstract="false" final="false" start="33" end="380">
  <file path="/var/www/_modules/social_integration/trunk/docs/en/phpdox/../../../thirdparty/Zend/Crypt" file="DiffieHellman.php" realpath="/var/www/_modules/social_integration/trunk/thirdparty/Zend/Crypt/DiffieHellman.php" size="12375" time="2015-03-14T10:23:59+13:00" unixtime="1426281839" sha1="efe5edf80dd0f944c6afb949d0ce8a7ce9db4ab3" relative="thirdparty/Zend/Crypt/DiffieHellman.php"/>
  <docblock>
    <description compact="PHP implementation of the Diffie-Hellman public key encryption algorithm.">Allows two unassociated parties to establish a joint shared secret key
to be used in encrypting subsequent communications.</description>
    <category value="Zend"/>
    <package value="Zend_Crypt"/>
    <copyright value="Copyright (c) 2005-2011 Zend Technologies USA Inc. (http://www.zend.com)"/>
    <license name="http://framework.zend.com/license/new-bsd     New BSD License"/>
  </docblock>
  <member name="useOpenssl" type="{unknown}" default="true" visibility="public" line="42">
    <docblock>
      <description compact="Static flag to select whether to use PHP5.3's openssl extension if available."/>
      <var type="boolean"/>
    </docblock>
  </member>
  <member name="_prime" type="{unknown}" default="null" visibility="private" line="49">
    <docblock>
      <description compact="Default large prime number; required by the algorithm."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_generator" type="{unknown}" default="null" visibility="private" line="57">
    <docblock>
      <description compact="The default generator number. This number must be greater than 0 but less than the prime number set."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_privateKey" type="{unknown}" default="null" visibility="private" line="65">
    <docblock>
      <description compact="A private number set by the local user. It's optional and will be generated if not set."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_math" type="{unknown}" default="null" visibility="private" line="72">
    <docblock>
      <description compact="BigInteger support object courtesy of Zend_Crypt_Math"/>
      <var type="object">
        <type full="Zend_Crypt_Math_BigInteger" namespace="" name="Zend_Crypt_Math_BigInteger"/>
      </var>
    </docblock>
  </member>
  <member name="_publicKey" type="{unknown}" default="null" visibility="private" line="79">
    <docblock>
      <description compact="The public key generated by this instance after calling generateKeys()."/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="_secretKey" type="{unknown}" default="null" visibility="private" line="87">
    <docblock>
      <description compact="The shared secret key resulting from a completed Diffie Hellman exchange"/>
      <var type="string"/>
    </docblock>
  </member>
  <constant name="BINARY" value="'binary'">
    <docblock>
      <description compact="Constants"/>
    </docblock>
  </constant>
  <constant name="NUMBER" value="'number'"/>
  <constant name="BTWOC" value="'btwoc'"/>
  <constructor name="__construct" start="107" end="115" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Constructor; if set construct the object using the parameter array to set values for Prime, Generator and Private.">If a Private Key is not set, one will be generated at random.</description>
      <param type="string" variable="$prime"/>
      <param type="string" variable="$generator"/>
      <param type="string" variable="$privateKey"/>
      <param type="string" variable="$privateKeyType"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="prime" byreference="false" type="{unknown}"/>
    <parameter name="generator" byreference="false" type="{unknown}"/>
    <parameter name="privateKey" byreference="false" type="{unknown}" default="null"/>
    <parameter name="privateKeyType" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </constructor>
  <method name="generateKeys" start="123" end="142" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Generate own public key. If a private number has not already been set, one will be generated at this stage."/>
      <return type="object">
        <type full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman"/>
      </return>
    </docblock>
  </method>
  <method name="setPublicKey" start="151" end="162" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Setter for the value of the public number"/>
      <param type="string" variable="$number"/>
      <param type="string" variable="$type"/>
      <return type="object">
        <type full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman"/>
      </return>
    </docblock>
    <parameter name="number" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="getPublicKey" start="171" end="183" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns own public key for communication to the second party to this transaction."/>
      <param type="string" variable="$type"/>
      <return type="string"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="computeSecretKey" start="200" end="215" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Compute the shared secret key based on the public key received from the the second party to this transaction. This should agree to the secret key the second party computes on our own public key.">Once in agreement, the key is known to only to both parties.
By default, the function expects the public key to be in binary form
which is the typical format when being transmitted.

If you need the binary form of the shared secret key, call
getSharedSecretKey() with the optional parameter for Binary output.</description>
      <param type="string" variable="$publicKey"/>
      <param type="string" variable="$type"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="publicKey" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
    <parameter name="output" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="getSharedSecretKey" start="223" end="235" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Return the computed shared secret key from the DiffieHellman transaction"/>
      <param type="string" variable="$type"/>
      <return type="string"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="setPrime" start="243" end="251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Setter for the value of the prime number"/>
      <param type="string" variable="$number"/>
      <return type="object">
        <type full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman"/>
      </return>
    </docblock>
    <parameter name="number" byreference="false" type="{unknown}"/>
  </method>
  <method name="getPrime" start="258" end="265" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Getter for the value of the prime number"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="setGenerator" start="274" end="282" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Setter for the value of the generator number"/>
      <param type="string" variable="$number"/>
      <return type="object">
        <type full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman"/>
      </return>
    </docblock>
    <parameter name="number" byreference="false" type="{unknown}"/>
  </method>
  <method name="getGenerator" start="289" end="296" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Getter for the value of the generator number"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="setPrivateKey" start="305" end="316" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Setter for the value of the private number"/>
      <param type="string" variable="$number"/>
      <param type="string" variable="$type"/>
      <return type="object">
        <type full="Zend_Crypt_DiffieHellman" namespace="" name="Zend_Crypt_DiffieHellman"/>
      </return>
    </docblock>
    <parameter name="number" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="getPrivateKey" start="324" end="335" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Getter for the value of the private number"/>
      <param type="string" variable="$type"/>
      <return type="string"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}" default="self::NUMBER"/>
  </method>
  <method name="hasPrivateKey" start="342" end="345" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Check whether a private key currently exists."/>
      <return type="boolean"/>
    </docblock>
  </method>
  <method name="setBigIntegerMath" start="356" end="363" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Setter to pass an extension parameter which is used to create a specific BigInteger instance for a specific extension type.">Allows manual setting of the class in case of an extension
problem or bug.</description>
      <param type="string" variable="$extension"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="extension" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="@see Zend_Crypt_Math" line="358"/>
    </inline>
  </method>
  <method name="_generatePrivateKey" start="374" end="378" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="In the event a private number/key has not been set by the user, or generated by ext/openssl, a best attempt will be made to generate a random key. Having a random number generator installed on linux/bsd is highly recommended! The alternative is not recommended for production unless without any other option."/>
      <return type="string"/>
    </docblock>
  </method>
</class>
